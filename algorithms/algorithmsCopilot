def bubbleSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

def mergeSort(arr):
    if len(arr) >1:
        mid = len(arr)//2
        L = arr[:mid]
        R = arr[mid:]

        mergeSort(L)
        mergeSort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i+=1
            else:
                arr[k] = R[j]
                j+=1
            k+=1

        while i < len(L):
            arr[k] = L[i]
            i+=1
            k+=1

        while j < len(R):
            arr[k] = R[j]
            j+=1
            k+=1

def heapSort(arr):
    n = len(arr)
    for i in range(n, -1, -1):
        heapify(arr, n, i)
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)

    
def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >= 0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key

def quickSort(arr, low, high):
    if low < high:
        pi = partition(arr, low, high)
        quickSort(arr, low, pi-1)
        quickSort(arr, pi+1, high)

def binarySearch(arr, l, r, x):
    if r >= l:
        mid = l + (r - l)//2
        if arr[mid] == x:
            return mid
        elif arr[mid] > x:
            return binarySearch(arr, l, mid-1, x)
        else:
            return binarySearch(arr, mid+1, r, x)
    else:
        return -1


def breadthFirstSearch(graph, s):
    visited = [False] * len(graph)
    queue = []
    queue.append(s)
    visited[s] = True
    while queue:
        s = queue.pop(0)
        print(s, end = " ")
        for i in range(len(graph[s])):
            if visited[graph[s][i]] == False:
                queue.append(graph[s][i])
                visited[graph[s][i]] = True

def select(arr, k):
    n = len(arr)
    if n == 0:
        return -1
    if k > n:
        return -1
    if k == 1:
        return min(arr)
    if k == n:
        return max(arr)
    return select(arr[:k-1], k-1)

def selectionSort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

def linearSearch(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

def shellSort(arr):
    n = len(arr)
    gap = n//2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j-gap] > temp:
                arr[j] = arr[j-gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    
def countingSort(arr):
    n = len(arr)
    output = [0] * (max(arr) + 1)
    for i in range(n):
        output[arr[i]] += 1
    i = 0
    for j in range(len(output)):
        while output[j] > 0:
            arr[i] = j
            i += 1
            output[j] -= 1

def bogoSort(arr):
    while not isSorted(arr):
        shuffle(arr)

def radixSort(arr):
    n = len(arr)
    m = max(arr)
    exp = 1
    while m // exp > 0:
        count = [0] * 10
        output = [0] * n
        for i in range(n):
            count[(arr[i] // exp) % 10] += 1
        for i in range(1, 10):
            count[i] += count[i-1]
        i = n - 1
        while i >= 0:
            output[count[(arr[i] // exp) % 10] - 1] = arr[i]
            count[(arr[i] // exp) % 10] -= 1
            i -= 1
        for i in range(n):
            arr[i] = output[i]
        exp *= 10

def timSort(arr):
    n = len(arr)
    if n <= 1:
        return
    minrun = 32
    if n < minrun:
        insertionSort(arr)
        return
    arr = [arr[i] for i in range(0, n, 2)]
    timSort(arr)
    arr = [arr[i] for i in range(1, n, 2)]
    timSort(arr)
    arr = [arr[i] for i in range(0, n, 2)] + [arr[i] for i in range(1, n, 2)]
    timSort(arr)

def cocktailSort(arr):
    n = len(arr)
    swapped = True
    start = 0
    end = n - 1
    while swapped:
        swapped = False
        for i in range(start, end):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                swapped = True
        if not swapped:
            break
        swapped = False
        end -= 1
        for i in range(end-1, start-1, -1):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                swapped = True
        start += 1


def gnomeSort(arr):
    n = len(arr)
    i = 0
    while i < n:
        if i == 0 or arr[i-1] <= arr[i]:
            i += 1
        else:
            arr[i], arr[i-1] = arr[i-1], arr[i]
            i -= 1

def oddEvenSort(arr):
    n = len(arr)
    swapped = True
    while swapped:
        swapped = False
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                swapped = True
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                swapped = True
            
def subArraySort(arr):
    n = len(arr)
    for i in range(n):
        if arr[i] == i:
            return i
    return -1

def subsequentialSearch(arr, x):
    n = len(arr)
    for i in range(n):
        if arr[i] == x:
            return i
    return -1

def combSort(arr):
    n = len(arr)
    gap = n
    shrink = 1.3
    while gap > 1:
        gap = int(gap / shrink)
        for i in range(0, n-gap):
            if arr[i] > arr[i+gap]:
                arr[i], arr[i+gap] = arr[i+gap], arr[i]

def treeSort(arr):
    n = len(arr)
    tree = BinarySearchTree()
    for i in range(n):
        tree.insert(arr[i])
    tree.inorder(arr)



